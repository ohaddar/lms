// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  moduleProgress UserModuleProgress[]

  @@map("users")
}

// Module Model
model Module {
  id        String   @id @default(uuid())
  title     String
  videoUrl  String   @map("video_url")
  order     Int      @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userProgress UserModuleProgress[]

  @@map("modules")
}

// User Module Progress Model
model UserModuleProgress {
  id         String       @id @default(uuid())
  userId     String       @map("user_id")
  moduleId   String       @map("module_id")
  status     ModuleStatus @default(NOT_STARTED)
  startedAt  DateTime?    @map("started_at")
  completedAt DateTime?   @map("completed_at")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@map("user_module_progress")
}

// Enums
enum ModuleStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
