
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModuleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  videoUrl: 'videoUrl',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserModuleProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  moduleId: 'moduleId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  moduleId: 'moduleId',
  questionText: 'questionText',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  answerText: 'answerText',
  isCorrect: 'isCorrect',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserQuizAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  moduleId: 'moduleId',
  score: 'score',
  passed: 'passed',
  attemptedAt: 'attemptedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserQuizResponseScalarFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  answerId: 'answerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ModuleStatus = exports.$Enums.ModuleStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Module: 'Module',
  UserModuleProgress: 'UserModuleProgress',
  Question: 'Question',
  Answer: 'Answer',
  UserQuizAttempt: 'UserQuizAttempt',
  UserQuizResponse: 'UserQuizResponse'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/macbookair/Projects/vibe-lms/backend/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/macbookair/Projects/vibe-lms/backend/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": true,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// User Model\nmodel User {\n  id        String   @id @default(uuid())\n  email     String   @unique\n  password  String\n  firstName String   @map(\"first_name\")\n  lastName  String   @map(\"last_name\")\n  isActive  Boolean  @default(true) @map(\"is_active\")\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  moduleProgress UserModuleProgress[]\n  quizAttempts   UserQuizAttempt[]\n\n  @@map(\"users\")\n}\n\n// Module Model\nmodel Module {\n  id        String   @id @default(uuid())\n  title     String\n  videoUrl  String   @map(\"video_url\")\n  order     Int      @unique\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  userProgress UserModuleProgress[]\n  questions    Question[]\n\n  @@map(\"modules\")\n}\n\n// User Module Progress Model\nmodel UserModuleProgress {\n  id          String       @id @default(uuid())\n  userId      String       @map(\"user_id\")\n  moduleId    String       @map(\"module_id\")\n  status      ModuleStatus @default(NOT_STARTED)\n  startedAt   DateTime?    @map(\"started_at\")\n  completedAt DateTime?    @map(\"completed_at\")\n  createdAt   DateTime     @default(now()) @map(\"created_at\")\n  updatedAt   DateTime     @updatedAt @map(\"updated_at\")\n\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, moduleId])\n  @@map(\"user_module_progress\")\n}\n\n// Question Model\nmodel Question {\n  id           String   @id @default(uuid())\n  moduleId     String   @map(\"module_id\")\n  questionText String   @map(\"question_text\")\n  order        Int\n  createdAt    DateTime @default(now()) @map(\"created_at\")\n  updatedAt    DateTime @updatedAt @map(\"updated_at\")\n\n  module  Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)\n  answers Answer[]\n\n  @@unique([moduleId, order])\n  @@map(\"questions\")\n}\n\n// Answer Model\nmodel Answer {\n  id         String   @id @default(uuid())\n  questionId String   @map(\"question_id\")\n  answerText String   @map(\"answer_text\")\n  isCorrect  Boolean  @map(\"is_correct\")\n  order      Int\n  createdAt  DateTime @default(now()) @map(\"created_at\")\n  updatedAt  DateTime @updatedAt @map(\"updated_at\")\n\n  question          Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)\n  userQuizResponses UserQuizResponse[]\n\n  @@unique([questionId, order])\n  @@map(\"answers\")\n}\n\n// User Quiz Attempt Model\nmodel UserQuizAttempt {\n  id          String   @id @default(uuid())\n  userId      String   @map(\"user_id\")\n  moduleId    String   @map(\"module_id\")\n  score       Int\n  passed      Boolean\n  attemptedAt DateTime @default(now()) @map(\"attempted_at\")\n  createdAt   DateTime @default(now()) @map(\"created_at\")\n  updatedAt   DateTime @updatedAt @map(\"updated_at\")\n\n  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)\n  responses UserQuizResponse[]\n\n  @@map(\"user_quiz_attempts\")\n}\n\n// User Quiz Response Model\nmodel UserQuizResponse {\n  id        String   @id @default(uuid())\n  attemptId String   @map(\"attempt_id\")\n  answerId  String   @map(\"answer_id\")\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  attempt UserQuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)\n  answer  Answer          @relation(fields: [answerId], references: [id])\n\n  @@map(\"user_quiz_responses\")\n}\n\n// Enums\nenum ModuleStatus {\n  NOT_STARTED\n  IN_PROGRESS\n  COMPLETED\n}\n",
  "inlineSchemaHash": "0f669ef99edbd6fb2fb215cd9a205aacd0e36d3d473e3b4790cc5c5fd16a63c8",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"first_name\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"last_name\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"moduleProgress\",\"kind\":\"object\",\"type\":\"UserModuleProgress\",\"relationName\":\"UserToUserModuleProgress\"},{\"name\":\"quizAttempts\",\"kind\":\"object\",\"type\":\"UserQuizAttempt\",\"relationName\":\"UserToUserQuizAttempt\"}],\"dbName\":\"users\"},\"Module\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"videoUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"video_url\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"userProgress\",\"kind\":\"object\",\"type\":\"UserModuleProgress\",\"relationName\":\"ModuleToUserModuleProgress\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"ModuleToQuestion\"}],\"dbName\":\"modules\"},\"UserModuleProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"moduleId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"module_id\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ModuleStatus\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"started_at\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"completed_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserModuleProgress\"},{\"name\":\"module\",\"kind\":\"object\",\"type\":\"Module\",\"relationName\":\"ModuleToUserModuleProgress\"}],\"dbName\":\"user_module_progress\"},\"Question\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"moduleId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"module_id\"},{\"name\":\"questionText\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"question_text\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"module\",\"kind\":\"object\",\"type\":\"Module\",\"relationName\":\"ModuleToQuestion\"},{\"name\":\"answers\",\"kind\":\"object\",\"type\":\"Answer\",\"relationName\":\"AnswerToQuestion\"}],\"dbName\":\"questions\"},\"Answer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"question_id\"},{\"name\":\"answerText\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"answer_text\"},{\"name\":\"isCorrect\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_correct\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"AnswerToQuestion\"},{\"name\":\"userQuizResponses\",\"kind\":\"object\",\"type\":\"UserQuizResponse\",\"relationName\":\"AnswerToUserQuizResponse\"}],\"dbName\":\"answers\"},\"UserQuizAttempt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"moduleId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"module_id\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"passed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"attemptedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"attempted_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserQuizAttempt\"},{\"name\":\"responses\",\"kind\":\"object\",\"type\":\"UserQuizResponse\",\"relationName\":\"UserQuizAttemptToUserQuizResponse\"}],\"dbName\":\"user_quiz_attempts\"},\"UserQuizResponse\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attemptId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"attempt_id\"},{\"name\":\"answerId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"answer_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"attempt\",\"kind\":\"object\",\"type\":\"UserQuizAttempt\",\"relationName\":\"UserQuizAttemptToUserQuizResponse\"},{\"name\":\"answer\",\"kind\":\"object\",\"type\":\"Answer\",\"relationName\":\"AnswerToUserQuizResponse\"}],\"dbName\":\"user_quiz_responses\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

