// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  moduleProgress UserModuleProgress[]
  quizAttempts   UserQuizAttempt[]
  certificates   Certificate[]
  moduleFeedback ModuleFeedback[]

  @@map("users")
}

// Module Model
model Module {
  id        String   @id @default(uuid())
  title     String
  videoUrl  String   @map("video_url")
  order     Int      @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userProgress   UserModuleProgress[]
  questions      Question[]
  moduleFeedback ModuleFeedback[]

  @@map("modules")
}

// User Module Progress Model
model UserModuleProgress {
  id          String       @id @default(uuid())
  userId      String       @map("user_id")
  moduleId    String       @map("module_id")
  status      ModuleStatus @default(NOT_STARTED)
  isUnlocked  Boolean      @default(false) @map("is_unlocked")
  quizPassed  Boolean      @default(false) @map("quiz_passed")
  startedAt   DateTime?    @map("started_at")
  completedAt DateTime?    @map("completed_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@map("user_module_progress")
}

// Question Model
model Question {
  id           String   @id @default(uuid())
  moduleId     String   @map("module_id")
  questionText String   @map("question_text")
  order        Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  module  Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@unique([moduleId, order])
  @@map("questions")
}

// Answer Model
model Answer {
  id         String   @id @default(uuid())
  questionId String   @map("question_id")
  answerText String   @map("answer_text")
  isCorrect  Boolean  @map("is_correct")
  order      Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  question          Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userQuizResponses UserQuizResponse[]

  @@unique([questionId, order])
  @@map("answers")
}

// User Quiz Attempt Model
model UserQuizAttempt {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  moduleId    String   @map("module_id")
  score       Int
  passed      Boolean
  attemptedAt DateTime @default(now()) @map("attempted_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses UserQuizResponse[]

  @@map("user_quiz_attempts")
}

// User Quiz Response Model
model UserQuizResponse {
  id        String   @id @default(uuid())
  attemptId String   @map("attempt_id")
  answerId  String   @map("answer_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  attempt UserQuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  answer  Answer          @relation(fields: [answerId], references: [id])

  @@map("user_quiz_responses")
}

// Certificate Model
model Certificate {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  certificateNumber String   @unique @map("certificate_number")
  issuedAt          DateTime @default(now()) @map("issued_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

// Module Feedback Model
model ModuleFeedback {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  moduleId  String   @map("module_id")
  helpful   Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@map("module_feedback")
}

// Enums
enum ModuleStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
